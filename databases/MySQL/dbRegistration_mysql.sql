CREATE DATABASE dbRegistration;

use dbRegistration;

CREATE TABLE PERSON
(
	ID INT NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	EMAIL VARCHAR(100) NOT NULL
);

CREATE TABLE PHYSICALPERSON
(
	ID INT NOT NULL,
	PERSON_ID INT NOT NULL,
	SALARY DECIMAL(12,2) NOT NULL,
	DATEBIRTH DATE NOT NULL,
	GENRE CHAR(1) NOT NULL
);

CREATE TABLE USERSYS
(
	ID INT NOT NULL,
	USERNAME VARCHAR(20) NOT NULL,
	USERPASS VARCHAR(200) NOT NULL
);

CREATE TABLE USERSYS_LOGIN
(
	ID INT NOT NULL,
	USERSYS_ID INT NOT NULL,
	DATELOG DATETIME NOT NULL
);

ALTER TABLE PERSON ADD CONSTRAINT PK__PERSON PRIMARY KEY (ID);
ALTER TABLE PHYSICALPERSON ADD CONSTRAINT PK__PHYSICALPERSON PRIMARY KEY (ID);
ALTER TABLE PHYSICALPERSON ADD CONSTRAINT FK__PHYSICALPERSON_PERSON FOREIGN KEY (PERSON_ID) REFERENCES PERSON(ID);
ALTER TABLE USERSYS ADD CONSTRAINT PK__USERSYS PRIMARY KEY (ID);
ALTER TABLE USERSYS_LOGIN ADD CONSTRAINT PK__USERSYS_LOGIN PRIMARY KEY (ID);
ALTER TABLE USERSYS_LOGIN ADD CONSTRAINT FK__USERSYS_LOGIN__USERSYS FOREIGN KEY (USERSYS_ID) REFERENCES USERSYS(ID);
ALTER TABLE PERSON ADD CONSTRAINT UNQ__EMAIL_PERSON UNIQUE(EMAIL);
ALTER TABLE PHYSICALPERSON ADD CONSTRAINT CHK__SALARY_PHYSICALPERSON CHECK(SALARY >= 0);
ALTER TABLE PHYSICALPERSON ADD CONSTRAINT CHK__DATEBIRTH_PHYSICALPERSON CHECK(DATEBIRTH <= DATE_ADD(NOW(), INTERVAL -18 YEAR));
ALTER TABLE PHYSICALPERSON ADD CONSTRAINT CHK__GENRE_PHYSICALPERSON CHECK(GENRE = 'M' OR GENRE = 'F');
ALTER TABLE USERSYS ADD CONSTRAINT UNQ__USERNAME_USERSYS UNIQUE(USERNAME);

CREATE VIEW VW__PHYSICALPERSON AS SELECT P.ID, P.NAME, P.EMAIL, PP.SALARY, PP.DATEBIRTH, PP.GENRE FROM PERSON AS P INNER JOIN PHYSICALPERSON AS PP ON P.ID = PP.PERSON_ID;

CREATE VIEW VW__USERSYS AS SELECT * FROM USERSYS;

CREATE PROCEDURE SP_INSERT__PERSON (P_ID INT, P_NAME VARCHAR(100), P_EMAIL VARCHAR(100))
BEGIN
	INSERT INTO PERSON VALUES(P_ID, P_NAME, P_EMAIL);
END;

CREATE PROCEDURE SP_EDIT__PERSON (P_ID INT, P_NAME VARCHAR(100), P_EMAIL VARCHAR(100))
BEGIN
	UPDATE PERSON SET NAME = P_NAME, EMAIL = P_EMAIL WHERE ID = P_ID;
END;

CREATE PROCEDURE SP_DELETE__PERSON (P_ID INT)
BEGIN
	DELETE FROM PERSON WHERE ID = P_ID;
END;

CREATE PROCEDURE SP_INSERT__PHYSICALPERSON (ID INT, SALARY DECIMAL(12,2), DATEBIRTH DATE, GENRE CHAR(1))
BEGIN
	INSERT INTO PHYSICALPERSON VALUES(ID, ID, SALARY, DATEBIRTH, GENRE);
END;

CREATE PROCEDURE SP_EDIT__PHYSICALPERSON (ID INT, SALARY DECIMAL(12,2), DATEBIRTH DATE, GENRE CHAR(1))
BEGIN
	UPDATE PHYSICALPERSON SET DATEBIRTH = DATEBIRTH, SALARY = SALARY, GENRE = GENRE WHERE ID = ID;
END;

CREATE PROCEDURE SP_DELETE__PHYSICALPERSON (ID INT)
BEGIN
	DELETE FROM PHYSICALPERSON WHERE ID = ID;
END;

CREATE PROCEDURE SP_INSERT__USERSYS (ID INT, USERNAME VARCHAR(100), USERPASS VARCHAR(200))
BEGIN
	INSERT INTO USERSYS VALUES(ID, USERNAME, USERPASS);
END;

CREATE PROCEDURE SP_DELETE__USERSYS (ID INT)
BEGIN
	DELETE FROM USERSYS WHERE ID = ID;
END;
	
CREATE PROCEDURE SP_GET__PHYSICALPERSON_SAL_ABOVEAVG()
BEGIN
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY > (SELECT AVG(SALARY) FROM PHYSICALPERSON);
END;

CREATE PROCEDURE SP_GET__PHYSICALPERSON_SAL_UNDERAVG()
BEGIN
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY < (SELECT AVG(SALARY) FROM PHYSICALPERSON);
END;

CREATE PROCEDURE SP_GET__PHYSICALPERSON_SAL_EQUALAVG()
BEGIN
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY = (SELECT AVG(SALARY) FROM PHYSICALPERSON);
END;

CREATE PROCEDURE SP_GET__PHYSICALPERSON_HIGHERSAL()
BEGIN
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY = (SELECT MAX(SALARY) FROM PHYSICALPERSON);
END;

CREATE PROCEDURE SP_GET__PHYSICALPERSON_LOWSAL()
BEGIN
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY = (SELECT MIN(SALARY) FROM PHYSICALPERSON);
END;

CREATE PROCEDURE INSERT__PHYSICALPERSON (P_NAME VARCHAR(100), P_EMAIL VARCHAR(100), P_SALARY DECIMAL(12,2), P_DATEBIRTH DATE, P_GENRE CHAR(1))
BEGIN
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      ROLLBACK;  
   END;
   
   DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
      ROLLBACK;  
   END;
   
   START TRANSACTION;
   SET @ID_INSERT = (SELECT IFNULL(MAX(ID)+1,1) FROM PERSON);
   CALL SP_INSERT__PERSON (@ID_INSERT, P_NAME, P_EMAIL);
   CALL SP_INSERT__PHYSICALPERSON (@ID_INSERT, P_SALARY, P_DATEBIRTH, P_GENRE);
   COMMIT;
END;

CREATE PROCEDURE EDIT__PHYSICALPERSON (P_ID INT, P_NAME VARCHAR(100), P_EMAIL VARCHAR(100), P_SALARY DECIMAL(12,2), P_DATEBIRTH DATE, P_GENRE CHAR(1))
BEGIN
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      ROLLBACK;  
   END;
   
   DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
      ROLLBACK;  
   END;
   
   START TRANSACTION;
  CALL SP_EDIT__PERSON (P_ID, P_NAME, P_EMAIL);
   CALL SP_EDIT__PHYSICALPERSON (P_ID, P_SALARY, P_DATEBIRTH, P_GENRE);
   COMMIT;
END;

CREATE PROCEDURE DELETE__PHYSICALPERSON (P_ID INT)
BEGIN
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      ROLLBACK;  
   END;
   
   DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
      ROLLBACK;  
   END;
   
   START TRANSACTION;
	 CALL SP_DELETE__PHYSICALPERSON(P_ID);
   CALL SP_DELETE__PERSON(P_ID);
   COMMIT;
END;

CREATE PROCEDURE INSERT__USERSYS (USERNAME VARCHAR(100), USERPASS VARCHAR(200))
BEGIN
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      ROLLBACK;
   END;

   DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
      ROLLBACK;
   END;

   START TRANSACTION;
   SET @ID_INSERT = (SELECT IFNULL(MAX(ID)+1,1) FROM USERSYS);
   CALL SP_INSERT__USERSYS (@ID_INSERT, USERNAME, SHA2(USERPASS,512));
   COMMIT;
END;

CREATE PROCEDURE INSERT__USERSYS_LOGIN (USERSYS_ID INTEGER)
BEGIN
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      ROLLBACK;
   END;

   DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
      ROLLBACK;
   END;

   START TRANSACTION;
   SET @ID_INSERT = (SELECT IFNULL(MAX(ID)+1,1) FROM USERSYS_LOGIN);
   INSERT INTO USERSYS_LOGIN VALUES(@ID_INSERT, USERSYS_ID, NOW());
   COMMIT;
END;

CREATE PROCEDURE SP_GET__PHYSICALPERSON_BYID (ID INT)
BEGIN
    SET @ID = ID;
    SELECT * FROM VW__PHYSICALPERSON WHERE ID = ID;
END;

CREATE PROCEDURE SP_GET__PHYSICALPERSON_BYNAME (NAME VARCHAR(100))
BEGIN
    SET @NAME = NAME;
    SELECT * FROM VW__PHYSICALPERSON WHERE NAME LIKE CONCAT(NAME,'%');
END;

CREATE PROCEDURE SP_GET__PHYSICALPERSON_BYMONTHDATEBIRTH (MONTH INT)
BEGIN
   SET @MONTH = MONTH;
   SELECT * FROM VW__PHYSICALPERSON WHERE EXTRACT(MONTH FROM DATEBIRTH) = @MONTH;
END;

CREATE PROCEDURE FC_GET__PHYSICALPERSON_BYSALARYRANGE (SAL1 INT, SAL2 INT)
BEGIN
   SET @SAL1 = SAL1;
   SET @SAL2 = SAL2;
   SELECT * FROM VW__PHYSICALPERSON WHERE SALARY BETWEEN @SAL1 AND @SAL2;
END;

CREATE PROCEDURE SP_TOLOG (P_USERNAME VARCHAR(100), P_USERPASS VARCHAR(200))
BEGIN	
   SELECT * FROM VW__USERSYS WHERE USERNAME LIKE binary P_USERNAME AND USERPASS LIKE BINARY SHA2(P_USERPASS,512);
END;

CREATE FUNCTION FC_GET__COUNTPHYSICALPERSON_BYGENRE (P_GENRE CHAR(1))
   RETURNS INT DETERMINISTIC
BEGIN
   SET @GENRE = P_GENRE;
   SET @R_COUNT = (SELECT COUNT(*) FROM PHYSICALPERSON WHERE GENRE = @GENRE);
   RETURN @R_COUNT;
END;

CREATE TRIGGER TGR__PHYSICALPERSON AFTER INSERT ON PHYSICALPERSON
FOR EACH ROW
BEGIN
   
END;

CALL INSERT__PHYSICALPERSON('Anderson','anderson@yyy.uuu',5000,'1981-11-12','M');
CALL INSERT__PHYSICALPERSON('Joana', 'joana@yyy.uuu',2000,'1982-01-13','F');
CALL INSERT__PHYSICALPERSON('Mara', 'mara@yyy.uuu',5000,'1954-06-08','F');
CALL INSERT__PHYSICALPERSON('Adriana', 'adriana@yyy.uuu',2000,'1975-02-27','F');
CALL INSERT__PHYSICALPERSON('Eduardo', 'eduardo@yyy.uuu',2500,'1982-09-18','M');
CALL INSERT__PHYSICALPERSON('Gilberto', 'gilberto@yyy.uuu',2500,'1953-10-10','F');
CALL INSERT__PHYSICALPERSON('Paula', 'paula@yyy.uuu',2000,'1979-12-02','M');

CALL INSERT__USERSYS('Admin', '121181');