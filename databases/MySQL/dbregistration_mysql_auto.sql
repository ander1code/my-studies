# Host: localhost  (Version 5.5.5-10.1.19-MariaDB)
# Date: 2017-04-15 23:41:30
# Generator: MySQL-Front 5.4  (Build 4.84) - http://www.mysqlfront.de/

/*!40101 SET NAMES utf8 */;

#
# Structure for table "person"
#

DROP TABLE IF EXISTS `person`;
CREATE TABLE `person` (
  `ID` int(11) NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `EMAIL` varchar(100) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `UNQ__EMAIL_PERSON` (`EMAIL`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

#
# Data for table "person"
#

INSERT INTO `person` VALUES (1,'Anderson','anderson@yyy.uuu'),(2,'Joana','joana@yyy.uuu'),(3,'Mara','mara@yyy.uuu'),(4,'Adriana','adriana@yyy.uuu'),(5,'Eduardo','eduardo@yyy.uuu'),(6,'Gilberto','gilberto@yyy.uuu'),(7,'Paula','paula@yyy.uuu');

#
# Structure for table "physicalperson"
#

DROP TABLE IF EXISTS `physicalperson`;
CREATE TABLE `physicalperson` (
  `ID` int(11) NOT NULL,
  `PERSON_ID` int(11) NOT NULL,
  `SALARY` decimal(12,2) NOT NULL,
  `DATEBIRTH` date NOT NULL,
  `GENRE` char(1) NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK__PHYSICALPERSON_PERSON` (`PERSON_ID`),
  CONSTRAINT `FK__PHYSICALPERSON_PERSON` FOREIGN KEY (`PERSON_ID`) REFERENCES `person` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

#
# Data for table "physicalperson"
#

INSERT INTO `physicalperson` VALUES (1,1,5000.00,'1981-11-12','M'),(2,2,2000.00,'1982-01-13','F'),(3,3,5000.00,'1954-06-08','F'),(4,4,2000.00,'1975-02-27','F'),(5,5,2500.00,'1982-09-18','M'),(6,6,2500.00,'1953-10-10','F'),(7,7,2000.00,'1979-12-02','M');

#
# Structure for table "usersys"
#

DROP TABLE IF EXISTS `usersys`;
CREATE TABLE `usersys` (
  `ID` int(11) NOT NULL,
  `USERNAME` varchar(20) NOT NULL,
  `USERPASS` varchar(200) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `UNQ__USERNAME_USERSYS` (`USERNAME`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

#
# Data for table "usersys"
#

INSERT INTO `usersys` VALUES (1,'Admin','0e3b51920e070c019e6a34972dfd879e06c0e0179f3435d60adb4d4c79895a18829684bdf2b45856a82c3463dfd03dbca09cdbff7fea4446e9737566ac7e36ab');

#
# Structure for table "usersys_login"
#

DROP TABLE IF EXISTS `usersys_login`;
CREATE TABLE `usersys_login` (
  `ID` int(11) NOT NULL,
  `USERSYS_ID` int(11) NOT NULL,
  `DATELOG` datetime NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK__USERSYS_LOGIN__USERSYS` (`USERSYS_ID`),
  CONSTRAINT `FK__USERSYS_LOGIN__USERSYS` FOREIGN KEY (`USERSYS_ID`) REFERENCES `usersys` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

#
# Data for table "usersys_login"
#


#
# Function "FC_GET__COUNTPHYSICALPERSON_BYGENRE"
#

DROP FUNCTION IF EXISTS `FC_GET__COUNTPHYSICALPERSON_BYGENRE`;
CREATE FUNCTION `FC_GET__COUNTPHYSICALPERSON_BYGENRE`(P_GENRE CHAR(1)) RETURNS int(11)
    DETERMINISTIC
BEGIN
   SET @GENRE = P_GENRE;
   SET @R_COUNT = (SELECT COUNT(*) FROM PHYSICALPERSON WHERE GENRE = @GENRE);
   RETURN @R_COUNT;
END;

#
# View "vw__physicalperson"
#

DROP VIEW IF EXISTS `vw__physicalperson`;
CREATE
  ALGORITHM = UNDEFINED
  VIEW `vw__physicalperson`
  AS
SELECT
  p.`ID`,
  p.`NAME`,
  p.`EMAIL`,
  pp.`SALARY`,
  pp.`DATEBIRTH`,
  pp.`GENRE`
FROM
  (`person` p
    JOIN `physicalperson` pp ON ((p.`ID` = pp.`PERSON_ID`)));

#
# View "vw__usersys"
#

DROP VIEW IF EXISTS `vw__usersys`;
CREATE
  ALGORITHM = UNDEFINED
  VIEW `vw__usersys`
  AS
SELECT
  `ID`, `USERNAME`, `USERPASS`
FROM
  `usersys`;

#
# Procedure "FC_GET__PHYSICALPERSON_BYSALARYRANGE"
#

DROP PROCEDURE IF EXISTS `FC_GET__PHYSICALPERSON_BYSALARYRANGE`;
CREATE PROCEDURE `FC_GET__PHYSICALPERSON_BYSALARYRANGE`(SAL1 INT, SAL2 INT)
BEGIN
   SET @SAL1 = SAL1;
   SET @SAL2 = SAL2;
   SELECT * FROM VW__PHYSICALPERSON WHERE SALARY BETWEEN @SAL1 AND @SAL2;
END;

#
# Procedure "INSERT__USERSYS_LOGIN"
#

DROP PROCEDURE IF EXISTS `INSERT__USERSYS_LOGIN`;
CREATE PROCEDURE `INSERT__USERSYS_LOGIN`(USERSYS_ID INTEGER)
BEGIN
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      ROLLBACK;
   END;

   DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
      ROLLBACK;
   END;

   START TRANSACTION;
   SET @ID_INSERT = (SELECT IFNULL(MAX(ID)+1,1) FROM USERSYS_LOGIN);
   INSERT INTO USERSYS_LOGIN VALUES(@ID_INSERT, USERSYS_ID, NOW());
   COMMIT;
END;

#
# Procedure "SP_DELETE__PERSON"
#

DROP PROCEDURE IF EXISTS `SP_DELETE__PERSON`;
CREATE PROCEDURE `SP_DELETE__PERSON`(P_ID INT)
BEGIN
	DELETE FROM PERSON WHERE ID = P_ID;
END;

#
# Procedure "SP_DELETE__PHYSICALPERSON"
#

DROP PROCEDURE IF EXISTS `SP_DELETE__PHYSICALPERSON`;
CREATE PROCEDURE `SP_DELETE__PHYSICALPERSON`(ID INT)
BEGIN
	DELETE FROM PHYSICALPERSON WHERE ID = ID;
END;

#
# Procedure "DELETE__PHYSICALPERSON"
#

DROP PROCEDURE IF EXISTS `DELETE__PHYSICALPERSON`;
CREATE PROCEDURE `DELETE__PHYSICALPERSON`(P_ID INT)
BEGIN
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      ROLLBACK;  
   END;
   
   DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
      ROLLBACK;  
   END;
   
   START TRANSACTION;
	 CALL SP_DELETE__PHYSICALPERSON(P_ID);
   CALL SP_DELETE__PERSON(P_ID);
   COMMIT;
END;

#
# Procedure "SP_DELETE__USERSYS"
#

DROP PROCEDURE IF EXISTS `SP_DELETE__USERSYS`;
CREATE PROCEDURE `SP_DELETE__USERSYS`(ID INT)
BEGIN
	DELETE FROM USERSYS WHERE ID = ID;
END;

#
# Procedure "SP_EDIT__PERSON"
#

DROP PROCEDURE IF EXISTS `SP_EDIT__PERSON`;
CREATE PROCEDURE `SP_EDIT__PERSON`(P_ID INT, P_NAME VARCHAR(100), P_EMAIL VARCHAR(100))
BEGIN
	UPDATE PERSON SET NAME = P_NAME, EMAIL = P_EMAIL WHERE ID = P_ID;
END;

#
# Procedure "SP_EDIT__PHYSICALPERSON"
#

DROP PROCEDURE IF EXISTS `SP_EDIT__PHYSICALPERSON`;
CREATE PROCEDURE `SP_EDIT__PHYSICALPERSON`(ID INT, SALARY DECIMAL(12,2), DATEBIRTH DATE, GENRE CHAR(1))
BEGIN
	UPDATE PHYSICALPERSON SET DATEBIRTH = DATEBIRTH, SALARY = SALARY, GENRE = GENRE WHERE ID = ID;
END;

#
# Procedure "EDIT__PHYSICALPERSON"
#

DROP PROCEDURE IF EXISTS `EDIT__PHYSICALPERSON`;
CREATE PROCEDURE `EDIT__PHYSICALPERSON`(P_ID INT, P_NAME VARCHAR(100), P_EMAIL VARCHAR(100), P_SALARY DECIMAL(12,2), P_DATEBIRTH DATE, P_GENRE CHAR(1))
BEGIN
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      ROLLBACK;  
   END;
   
   DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
      ROLLBACK;  
   END;
   
   START TRANSACTION;
  CALL SP_EDIT__PERSON (P_ID, P_NAME, P_EMAIL);
   CALL SP_EDIT__PHYSICALPERSON (P_ID, P_SALARY, P_DATEBIRTH, P_GENRE);
   COMMIT;
END;

#
# Procedure "SP_GET__PHYSICALPERSON_BYID"
#

DROP PROCEDURE IF EXISTS `SP_GET__PHYSICALPERSON_BYID`;
CREATE PROCEDURE `SP_GET__PHYSICALPERSON_BYID`(ID INT)
BEGIN
    SET @ID = ID;
    SELECT * FROM VW__PHYSICALPERSON WHERE ID = ID;
END;

#
# Procedure "SP_GET__PHYSICALPERSON_BYMONTHDATEBIRTH"
#

DROP PROCEDURE IF EXISTS `SP_GET__PHYSICALPERSON_BYMONTHDATEBIRTH`;
CREATE PROCEDURE `SP_GET__PHYSICALPERSON_BYMONTHDATEBIRTH`(MONTH INT)
BEGIN
   SET @MONTH = MONTH;
   SELECT * FROM VW__PHYSICALPERSON WHERE EXTRACT(MONTH FROM DATEBIRTH) = @MONTH;
END;

#
# Procedure "SP_GET__PHYSICALPERSON_BYNAME"
#

DROP PROCEDURE IF EXISTS `SP_GET__PHYSICALPERSON_BYNAME`;
CREATE PROCEDURE `SP_GET__PHYSICALPERSON_BYNAME`(NAME VARCHAR(100))
BEGIN
    SET @NAME = NAME;
    SELECT * FROM VW__PHYSICALPERSON WHERE NAME LIKE CONCAT(NAME,'%');
END;

#
# Procedure "SP_GET__PHYSICALPERSON_HIGHERSAL"
#

DROP PROCEDURE IF EXISTS `SP_GET__PHYSICALPERSON_HIGHERSAL`;
CREATE PROCEDURE `SP_GET__PHYSICALPERSON_HIGHERSAL`()
BEGIN
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY = (SELECT MAX(SALARY) FROM PHYSICALPERSON);
END;

#
# Procedure "SP_GET__PHYSICALPERSON_LOWSAL"
#

DROP PROCEDURE IF EXISTS `SP_GET__PHYSICALPERSON_LOWSAL`;
CREATE PROCEDURE `SP_GET__PHYSICALPERSON_LOWSAL`()
BEGIN
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY = (SELECT MIN(SALARY) FROM PHYSICALPERSON);
END;

#
# Procedure "SP_GET__PHYSICALPERSON_SAL_ABOVEAVG"
#

DROP PROCEDURE IF EXISTS `SP_GET__PHYSICALPERSON_SAL_ABOVEAVG`;
CREATE PROCEDURE `SP_GET__PHYSICALPERSON_SAL_ABOVEAVG`()
BEGIN
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY > (SELECT AVG(SALARY) FROM PHYSICALPERSON);
END;

#
# Procedure "SP_GET__PHYSICALPERSON_SAL_EQUALAVG"
#

DROP PROCEDURE IF EXISTS `SP_GET__PHYSICALPERSON_SAL_EQUALAVG`;
CREATE PROCEDURE `SP_GET__PHYSICALPERSON_SAL_EQUALAVG`()
BEGIN
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY = (SELECT AVG(SALARY) FROM PHYSICALPERSON);
END;

#
# Procedure "SP_GET__PHYSICALPERSON_SAL_UNDERAVG"
#

DROP PROCEDURE IF EXISTS `SP_GET__PHYSICALPERSON_SAL_UNDERAVG`;
CREATE PROCEDURE `SP_GET__PHYSICALPERSON_SAL_UNDERAVG`()
BEGIN
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY < (SELECT AVG(SALARY) FROM PHYSICALPERSON);
END;

#
# Procedure "SP_INSERT__PERSON"
#

DROP PROCEDURE IF EXISTS `SP_INSERT__PERSON`;
CREATE PROCEDURE `SP_INSERT__PERSON`(P_ID INT, P_NAME VARCHAR(100), P_EMAIL VARCHAR(100))
BEGIN
	INSERT INTO PERSON VALUES(P_ID, P_NAME, P_EMAIL);
END;

#
# Procedure "SP_INSERT__PHYSICALPERSON"
#

DROP PROCEDURE IF EXISTS `SP_INSERT__PHYSICALPERSON`;
CREATE PROCEDURE `SP_INSERT__PHYSICALPERSON`(ID INT, SALARY DECIMAL(12,2), DATEBIRTH DATE, GENRE CHAR(1))
BEGIN
	INSERT INTO PHYSICALPERSON VALUES(ID, ID, SALARY, DATEBIRTH, GENRE);
END;

#
# Procedure "INSERT__PHYSICALPERSON"
#

DROP PROCEDURE IF EXISTS `INSERT__PHYSICALPERSON`;
CREATE PROCEDURE `INSERT__PHYSICALPERSON`(P_NAME VARCHAR(100), P_EMAIL VARCHAR(100), P_SALARY DECIMAL(12,2), P_DATEBIRTH DATE, P_GENRE CHAR(1))
BEGIN
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      ROLLBACK;  
   END;
   
   DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
      ROLLBACK;  
   END;
   
   START TRANSACTION;
   SET @ID_INSERT = (SELECT IFNULL(MAX(ID)+1,1) FROM PERSON);
   CALL SP_INSERT__PERSON (@ID_INSERT, P_NAME, P_EMAIL);
   CALL SP_INSERT__PHYSICALPERSON (@ID_INSERT, P_SALARY, P_DATEBIRTH, P_GENRE);
   COMMIT;
END;

#
# Procedure "SP_INSERT__USERSYS"
#

DROP PROCEDURE IF EXISTS `SP_INSERT__USERSYS`;
CREATE PROCEDURE `SP_INSERT__USERSYS`(ID INT, USERNAME VARCHAR(100), USERPASS VARCHAR(200))
BEGIN
	INSERT INTO USERSYS VALUES(ID, USERNAME, USERPASS);
END;

#
# Procedure "INSERT__USERSYS"
#

DROP PROCEDURE IF EXISTS `INSERT__USERSYS`;
CREATE PROCEDURE `INSERT__USERSYS`(USERNAME VARCHAR(100), USERPASS VARCHAR(200))
BEGIN
   DECLARE EXIT HANDLER FOR SQLWARNING
   BEGIN
      ROLLBACK;
   END;

   DECLARE EXIT HANDLER FOR SQLEXCEPTION
   BEGIN
      ROLLBACK;
   END;

   START TRANSACTION;
   SET @ID_INSERT = (SELECT IFNULL(MAX(ID)+1,1) FROM USERSYS);
   CALL SP_INSERT__USERSYS (@ID_INSERT, USERNAME, SHA2(USERPASS,512));
   COMMIT;
END;

#
# Procedure "SP_TOLOG"
#

DROP PROCEDURE IF EXISTS `SP_TOLOG`;
CREATE PROCEDURE `SP_TOLOG`(P_USERNAME VARCHAR(100), P_USERPASS VARCHAR(200))
BEGIN	
   SELECT * FROM VW__USERSYS WHERE USERNAME LIKE binary P_USERNAME AND USERPASS LIKE BINARY SHA2(P_USERPASS,512);
END;

#
# Trigger "TGR__PHYSICALPERSON"
#

DROP TRIGGER IF EXISTS `TGR__PHYSICALPERSON`;
CREATE TRIGGER TGR__PHYSICALPERSON AFTER INSERT ON PHYSICALPERSON
FOR EACH ROW
BEGIN
   
END