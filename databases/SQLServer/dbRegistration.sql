-----------------------------------------------------------------------------------------------------------------
-- 1 - DATABASE -------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

CREATE DATABASE dbRegistration;
GO

USE dbRegistration; 
GO


-----------------------------------------------------------------------------------------------------------------
-- 2 - TABLES ---------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

CREATE TABLE PERSON
(
	ID INT NOT NULL,
	NAME VARCHAR(100) NOT NULL,
	EMAIL VARCHAR(100) NOT NULL
);
GO

CREATE TABLE PHYSICALPERSON
(
	ID INT NOT NULL,
	PERSON_ID INT NOT NULL,
	SALARY DECIMAL(12,2) NOT NULL,
	DATEBIRTH DATE NOT NULL,
	GENRE CHAR(1) NOT NULL
);
GO

CREATE TABLE USERSYS
(
	ID INT NOT NULL,
	USERNAME VARCHAR(20) NOT NULL,
	USERPASS VARCHAR(200) NOT NULL
);
GO

CREATE TABLE USERSYS_LOGIN
(
	ID INT NOT NULL,
	USERSYS_ID INT NOT NULL,
	DATELOG DATETIME NOT NULL
);
GO

-----------------------------------------------------------------------------------------------------------------
-- 2 - CONSTRAINTS ----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

ALTER TABLE PERSON ADD CONSTRAINT PK__PERSON PRIMARY KEY (ID);
ALTER TABLE PHYSICALPERSON ADD CONSTRAINT PK__PHYSICALPERSON PRIMARY KEY (ID);
ALTER TABLE PHYSICALPERSON ADD CONSTRAINT FK__PHYSICALPERSON_PERSON FOREIGN KEY (PERSON_ID) REFERENCES PERSON(ID);
ALTER TABLE USERSYS ADD CONSTRAINT PK__USERSYS PRIMARY KEY (ID);
ALTER TABLE USERSYS_LOGIN ADD CONSTRAINT PK__USERSYS_LOGIN PRIMARY KEY (ID);
ALTER TABLE USERSYS_LOGIN ADD CONSTRAINT FK__USERSYS_LOGIN__USERSYS FOREIGN KEY (USERSYS_ID) REFERENCES USERSYS(ID);
ALTER TABLE PERSON ADD CONSTRAINT UNQ__EMAIL_PERSON UNIQUE(EMAIL);
ALTER TABLE PHYSICALPERSON ADD CONSTRAINT CHK__SALARY_PHYSICALPERSON CHECK(SALARY >= 0);
ALTER TABLE PHYSICALPERSON ADD CONSTRAINT CHK__DATEBIRTH_PHYSICALPERSON CHECK(DATEBIRTH <=  DATEADD(YEAR, -18, GETDATE()));
ALTER TABLE PHYSICALPERSON ADD CONSTRAINT CHK__GENRE_PHYSICALPERSON CHECK(GENRE = 'M' OR GENRE = 'F');
ALTER TABLE USERSYS ADD CONSTRAINT UNQ__USERNAME_USERSYS UNIQUE(USERNAME);
GO
-----------------------------------------------------------------------------------------------------------------
-- 3 - VIEWS ----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

CREATE VIEW VW__PHYSICALPERSON 
AS
	SELECT P.ID, P.NAME, P.EMAIL, PP.SALARY, PP.DATEBIRTH, PP.GENRE FROM PERSON AS P INNER JOIN PHYSICALPERSON AS PP
	ON P.ID = PP.PERSON_ID
GO

CREATE VIEW VW__USERSYS
AS
	SELECT * FROM USERSYS;
GO
	
-----------------------------------------------------------------------------------------------------------------
-- 4 - STORED PROCEDURES ----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE SP_INSERT__PERSON (@ID INT, @NAME VARCHAR(100), @EMAIL VARCHAR(100))
AS
	INSERT INTO PERSON VALUES(@ID, @NAME, @EMAIL);
GO

CREATE PROCEDURE SP_EDIT__PERSON (@ID INT, @NAME VARCHAR(100), @EMAIL VARCHAR(100))
AS
	UPDATE PERSON SET NAME = @NAME, EMAIL = @EMAIL WHERE ID = @ID;
GO

CREATE PROCEDURE SP_DELETE__PERSON (@ID INT)
AS
	DELETE FROM PERSON WHERE ID = @ID;
GO

----------

CREATE PROCEDURE SP_INSERT__PHYSICALPERSON (@ID INT, @SALARY DECIMAL(12,2), @DATEBIRTH DATE, @GENRE CHAR(1))
AS
	INSERT INTO PHYSICALPERSON VALUES(@ID, @ID, @SALARY, @DATEBIRTH, @GENRE);
GO

CREATE PROCEDURE SP_EDIT__PHYSICALPERSON (@ID INT, @SALARY DECIMAL(12,2), @DATEBIRTH DATE, @GENRE CHAR(1))
AS
	UPDATE PHYSICALPERSON SET DATEBIRTH = @DATEBIRTH, SALARY = @SALARY, GENRE = @GENRE WHERE ID = @ID;
GO

CREATE PROCEDURE SP_DELETE__PHYSICALPERSON (@ID INT)
AS
	DELETE FROM PHYSICALPERSON WHERE ID = @ID;
GO

----------

CREATE PROCEDURE SP_INSERT__USERSYS (@ID INT, @USERNAME VARCHAR(100), @USERPASS VARCHAR(200))
AS
	INSERT INTO USERSYS VALUES(@ID, @USERNAME, HASHBYTES('SHA2_512',@USERPASS));
GO

CREATE PROCEDURE SP_DELETE__USERSYS (@ID INT)
AS
	DELETE FROM USERSYS WHERE ID = @ID;
GO

CREATE PROCEDURE SP_GET__PHYSICALPERSON_SAL_ABOVEAVG
AS
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY > (SELECT AVG(SALARY) FROM PHYSICALPERSON)
GO

CREATE PROCEDURE SP_GET__PHYSICALPERSON_SAL_UNDERAVG
AS
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY < (SELECT AVG(SALARY) FROM PHYSICALPERSON)
GO

CREATE PROCEDURE SP_GET__PHYSICALPERSON_SAL_EQUALAVG
AS
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY = (SELECT AVG(SALARY) FROM PHYSICALPERSON)
GO

CREATE PROCEDURE SP_GET__PHYSICALPERSON_HIGHERSAL
AS
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY = (SELECT MAX(SALARY) FROM PHYSICALPERSON)
GO

CREATE PROCEDURE SP_GET__PHYSICALPERSON_LOWSAL
AS
	SELECT * FROM VW__PHYSICALPERSON WHERE SALARY = (SELECT MIN(SALARY) FROM PHYSICALPERSON)
GO

------------

CREATE PROCEDURE INSERT__PHYSICALPERSON @NAME VARCHAR(100), @EMAIL VARCHAR(100), @SALARY DECIMAL(12,2), @DATEBIRTH DATE, @GENRE CHAR(1)
AS
	BEGIN TRY
		BEGIN TRAN
			DECLARE @ID_INSERT INT
			SELECT @ID_INSERT = ISNULL(MAX(ID)+1, 1) FROM PERSON
			EXEC SP_INSERT__PERSON @ID_INSERT, @NAME, @EMAIL
			EXEC SP_INSERT__PHYSICALPERSON @ID_INSERT, @SALARY, @DATEBIRTH, @GENRE
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		SELECT @@TRANCOUNT
	END CATCH
GO

CREATE PROCEDURE EDIT__PHYSICALPERSON @ID INT, @NAME VARCHAR(100), @EMAIL VARCHAR(100), @SALARY DECIMAL(12,2), @DATEBIRTH DATE, @GENRE CHAR(1)
AS
	BEGIN TRY
		BEGIN TRAN
			EXEC SP_EDIT__PERSON @ID, @NAME, @EMAIL
			EXEC SP_EDIT__PHYSICALPERSON @ID, @SALARY, @DATEBIRTH, @GENRE
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		SELECT @@TRANCOUNT
	END CATCH
GO

CREATE PROCEDURE DELETE__PHYSICALPERSON @ID INT
AS
	BEGIN TRY
		BEGIN TRAN
			EXEC [dbo].[SP_DELETE__PHYSICALPERSON] @ID
			EXEC [dbo].[SP_DELETE__PERSON] @ID
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		SELECT @@TRANCOUNT
	END CATCH
GO

-----------------------
CREATE PROCEDURE [dbo].[INSERT__USERSYS_LOGIN] @USERSYS_ID INT
AS
	BEGIN TRY
		BEGIN TRAN
			DECLARE @DATE_NOW DATETIME
			SELECT @DATE_NOW = GETDATE()
			DECLARE @ID INT
			SELECT @ID = ISNULL(MAX(ID)+1, 1) FROM USERSYS_LOGIN
			INSERT INTO USERSYS_LOGIN VALUES(@ID, @USERSYS_ID, @DATE_NOW)
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		SELECT @@TRANCOUNT
	END CATCH
GO
--------------------

CREATE PROCEDURE INSERT__USERSYS @USERNAME VARCHAR(100), @USERPASS VARCHAR(200)
AS
	BEGIN TRY
		BEGIN TRAN
			DECLARE @ID INT
			SELECT @ID = ISNULL(MAX(ID)+1, 1) FROM USERSYS
			EXEC SP_INSERT__USERSYS @ID, @USERNAME, @USERPASS
		COMMIT TRAN
	END TRY
	BEGIN CATCH
		SELECT @@TRANCOUNT
	END CATCH
GO

-----------------------------------------------------------------------------------------------------------------
-- 5 - FUNCTIONS ------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

CREATE FUNCTION FC_GET__PHYSICALPERSON_BYNAME (@NAME VARCHAR(100))
	RETURNS TABLE
AS
	RETURN(SELECT * FROM VW__PHYSICALPERSON WHERE NAME LIKE @NAME + '%')
GO

CREATE FUNCTION FC_GET__PHYSICALPERSON_BYID (@ID INT)
	RETURNS TABLE
AS
	RETURN(SELECT * FROM VW__PHYSICALPERSON WHERE ID = @ID)
GO	

CREATE FUNCTION FC_TOLOG (@USERNAME VARCHAR(100), @USERPASS VARCHAR(200))
	RETURNS INT
AS
BEGIN	
	DECLARE @LOG_RETURN INT;
	IF EXISTS(SELECT * FROM VW__USERSYS WHERE CAST(USERNAME AS varbinary(100)) = CAST(@USERNAME as varbinary(100)) AND CAST(USERPASS AS varbinary(200)) = CAST(HASHBYTES('SHA2_512', @USERPASS) as varbinary(200)))
	BEGIN
        SET @LOG_RETURN = 1;
    END
	ELSE
	BEGIN
		SET @LOG_RETURN = 0;
	END

	RETURN @LOG_RETURN;
END
GO

CREATE FUNCTION FC_GET__PHYSICALPERSON_BYMONTHDATEBIRTH (@MONTH INT)
	RETURNS TABLE
AS
	RETURN(SELECT * FROM VW__PHYSICALPERSON WHERE DATEPART(MONTH, DATEBIRTH) = @MONTH)
GO	

CREATE FUNCTION FC_GET__PHYSICALPERSON_BYSALARYRANGE (@SAL1 INT, @SAL2 INT)
	RETURNS TABLE
AS
	RETURN(SELECT * FROM VW__PHYSICALPERSON WHERE SALARY BETWEEN @SAL1 AND @SAL2)
GO	

CREATE FUNCTION FC_GET__COUNTPHYSICALPERSON_BYGENRE (@GENRE CHAR(1))
	RETURNS INT
AS
BEGIN
	RETURN(SELECT COUNT(*) FROM VW__PHYSICALPERSON WHERE GENRE = @GENRE)
END
GO	

-----------------------------------------------------------------------------------------------------------------
-- 6 - TRIGGER --------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

CREATE TRIGGER TGR__PHYSICALPERSON
ON PHYSICALPERSON
FOR INSERT
AS
BEGIN
	SELECT * FROM VW__PHYSICALPERSON;
END
GO

-----------------------------------------------------------------------------------------------------------------
-- 7 - DATA -----------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------

EXEC [dbo].[INSERT__PHYSICALPERSON] 'Anderson', 'anderson@yyy.uuu',5000,'1981-11-12','M'
EXEC [dbo].[INSERT__PHYSICALPERSON] 'Joana', 'joana@yyy.uuu',2000,'1982-01-13','F'
EXEC [dbo].[INSERT__PHYSICALPERSON] 'Mara', 'mara@yyy.uuu',5000,'1954-06-08','F'
EXEC [dbo].[INSERT__PHYSICALPERSON] 'Adriana', 'adriana@yyy.uuu',2000,'1975-02-27','F'
EXEC [dbo].[INSERT__PHYSICALPERSON] 'Eduardo', 'eduardo@yyy.uuu',2500,'1982-09-18','M'
EXEC [dbo].[INSERT__PHYSICALPERSON] 'Gilberto', 'gilberto@yyy.uuu',2500,'1953-10-10','F'
EXEC [dbo].[INSERT__PHYSICALPERSON] 'Paula', 'paula@yyy.uuu',2000,'1979-12-02','M'

EXEC [dbo].[INSERT__USERSYS] 'Admin', '121181'
